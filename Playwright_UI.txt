you are a playwright typescript automation engineer, Build and execute a full end-to-end test using Playwright with TypeScript, following best practices and modular architecture.



üîß Test Scenario

	1.	Set http headers with header name = X-SIT2-RAND-F4902E, value = F455E683B298ECD320, add this value in separate env file , (this should be added as secret in github)

	2.	Navigate to:https://www.sit2.marksandspencer.com/AjaxOrderItemAddCmd?catalogId=10051&storeId=10151&lang‚Ä¶20115201011

	‚ó¶	partNumber_1 from above url should be {Product_ID} be read from a test data file.

	‚ó¶	Quantity_1 from the above url should be{Random_Quantity} should be generated dynamically.

	3.	Assert: Text ‚ÄúAdded to bag‚Äù in the response

	4.	Navigate to homepage:https://www.sit2.marksandspencer.com

	‚ó¶	Click shopping bag with {random_quantity} items  (top-right).

	‚ó¶	Assert page title is My basket|M&S.

	5.	Click Checkout securely button:

	‚ó¶	Verify redirection to Login page.( assert Login Page | M&S)

	‚ó¶	Click Guest Checkout link.( assert Guest Checkout | M&S)

	6.	Enter Guest Email:

	‚ó¶	Use a random email.

	‚ó¶	Click Continue.

	‚ó¶	Assert navigation to Express Checkout page.

	7.	Delivery Flow:

	‚ó¶	Assert Collection and Delivery tabs are present.

	‚ó¶	Click Delivery tab.

	‚ó¶	Fill address form using test data under Delivery address section.

	‚ó¶	Confirm address and validate it is printed.

	8.	Delivery Method:

	‚ó¶	Choose Standard Delivery.

	‚ó¶	Click Confirm standard delivery button if it is there else move to next step  

	9.	Payment Flow:

	‚ó¶	Select Credit/Debit Card Payment.

	‚ó¶	Enter Visa card details from test data.

	‚ó¶	Click Place Order and Pay button.



üß± Project Structure

üìÅ Page Object Files

	‚Ä¢	ProductPage.ts

	‚Ä¢	MyBasketPage.ts

	‚Ä¢	LoginPage.ts

	‚Ä¢	GuestCheckoutPage.ts

	‚Ä¢	ExpressCheckoutPage.ts

	‚Ä¢	PaymentPage.ts

üìÅ Locator File

	‚Ä¢	locators.ts: Centralized locator definitions using role-based selectors.

üìÅ Test Data File

	‚Ä¢	testData.ts: like below

export const testData = {

productId: '20115201011',

visaCard: {

number: '4111111111111111',

expiry: '12/30',

cvv: '123',

name: 'Test User'

},

guestEmailDomain: '@example.com',

address: {

firstName: 'John',

lastName: 'Doe',

postcode: 'W1A 1AA',

addressLine1: '123 Test Street',

city: 'London',

phone: '07123456789'

}

};

Show more lines



üß† Best Practices to Follow

	‚Ä¢	Use Playwright‚Äôs built-in locators: getByRole, getByLabel, getByTestId, etc.

	‚Ä¢	Prefer web-first assertions: await expect(locator).toBeVisible(), etc.

	‚Ä¢	Avoid hardcoded values and timeouts.

	‚Ä¢	Use Playwright config objects like devices['Desktop Chrome'] for emulation.

	‚Ä¢	Reuse locators via variables inside the locator file.

	‚Ä¢	Follow Playwright.dev guidance for structure and performance.



‚úÖ Final Step

Once all code changes are complete:

	‚Ä¢	Run the test suite.

	‚Ä¢	Check for flaky locators or errors.

	‚Ä¢	Fix any unstable selectors using robust locator strategies.

	‚Ä¢	Ensure all assertions are reliable and fast.

	‚Ä¢	use playwright codegen to identify the correct locators incase if it fails

	‚Ä¢	add trace viewer for every run